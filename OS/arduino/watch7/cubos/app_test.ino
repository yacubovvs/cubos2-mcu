#define appNameClass    TestApplicationApp         // App name without spaces
#define appName         "Test app"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(byte event, int val1, int val2) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static byte icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    long time_finish;
    long time_start;

    /* */
    fillScreen(0, 0, 0);
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("Rect test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(byte i=0; i<61; i++){
        drawRect(1+i, 120+i, 240-i, 240-i);      
    }

    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 3442ms

    delay(2000);
    // */

    /* * /
    const byte testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };
   
    fillScreen(0, 0, 0);
    core_views_statusBar_draw();
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("Icon test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(byte i=0; i<60; i++){
        drawIcon(true, testIcon, 120, 120);      
    }

    setDrawColor(255, 255, 255);
    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 3581ms

    delay(2000);
    // */

    /* * /
    const byte testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };

    fillScreen(0, 0, 0);
    core_views_statusBar_draw();
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("String test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(byte ii=0; ii<10; ii++){
        #ifdef ESP8266
            ESP.wdtDisable();
        #endif
        for(byte i=0; i<10; i++){
            setDrawColor(255, 255, 255);
            drawString("Blink string", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 1);
            setDrawColor(0, 0, 0);
            drawString("Blink string", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 1);    
        }
    }

    setDrawColor(255, 255, 255);
    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 3170ms

    delay(2000);
    // */
    
    /* * /
    const byte testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };

    fillScreen(0, 0, 0);
    core_views_statusBar_draw();
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("String test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(byte ii=0; ii<5; ii++){
        #ifdef ESP8266
            ESP.wdtDisable();
        #endif

        setDrawColor(255, 255, 255);
        drawString("Blink", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 7);
        setDrawColor(0, 0, 0);
        drawString("Blink", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 7);    

    }

    setDrawColor(255, 255, 255);
    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 3170ms

    delay(2000);
    
    // */
    
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(byte event, int val1, int val2){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const byte appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x6f,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x1E,0x00,
    0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x78,
    0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0xFE,0xFF,0xFE,0x7F,0xFF,0xFF,0xF9,0x9F,0xFF,
    0xFF,0xE7,0xE7,0xFF,0xFF,0x9F,0xF9,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x1F,0xF8,0xFF,0xFF,0x67,0xE0,0xFF,0xFF,0x79,0x80,0xFF,0xFF,0x7E,0x00,
    0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x9F,0x01,0xFF,0xFF,0xE7,
    0x07,0xFF,0xFF,0xF9,0x1F,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDF,0x7F,0xFF,0xFF,0xDF,0xFF,0xFF,0xFF,
    0xC7,0x6B,0xFF,0xFF,0xDB,0x65,0xFF,0xFF,0xDB,0x6D,0xFF,0xFF,0xC7,0x6D,0xFF,0x7F,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xF8,
    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x06,0x60,0x00,0x00,0x18,0x18,
    0x00,0x00,0x60,0x06,0x00,0x00,0x80,0x01,0x00,0x00,0xE0,0x07,0x00,0x00,0x98,0x19,0x00,0x00,0x86,0x61,0x00,0x00,0x81,0x81,0x00,0x00,0x80,
    0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x60,0x86,0x00,0x00,0x18,0x98,0x00,0x00,
    0x06,0xE0,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x38,0x94,0x00,
    0x00,0x24,0x9A,0x00,0x00,0x24,0x92,0x00,0x00,0x38,0x92,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};